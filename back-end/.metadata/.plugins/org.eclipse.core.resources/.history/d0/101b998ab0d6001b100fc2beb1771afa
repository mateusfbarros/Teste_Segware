package com.mateus.post.resources;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.mateus.post.domain.Post;
import com.mateus.post.service.TodoService;


@CrossOrigin("*")
@RestController
@RequestMapping(value ="/todos")
public class PostResource {
	
	@Autowired
	private TodoService service;
	
	@GetMapping(value = "/{id}")
	public ResponseEntity<Post> findById(@PathVariable Integer id){
		Post obj = service.findById(id);
		return ResponseEntity.ok().body(obj);
	}
	
	@GetMapping(value = "/open")
	public ResponseEntity<List<Post>> listOpen(){
		List<Post> list = service.findAllOpen();
		return ResponseEntity.ok().body(list); 
	}
	
	@GetMapping(value = "/close")
	public ResponseEntity<List<Post>> listClose(){
		List<Post> list = service.findAllClose();
		return ResponseEntity.ok().body(list); 
	}
	
	@GetMapping
	public ResponseEntity<List<Post>> listAll(){
		 List<Post> list = service.findAll();
		 return ResponseEntity.ok().body(list); 
	}
	
	@PostMapping
	public ResponseEntity<Post> create(@RequestBody Post obj){
		obj = service.create(obj);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).build();
	}
	
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<Void> delete(@PathVariable Integer id){
		service.delete(id);
		return ResponseEntity.noContent().build();
	}
	
	@PutMapping(value = "/{id}")
	public ResponseEntity<Post> update(@PathVariable Integer id, @RequestBody Post obj){
		Post newObj = service.update(id, obj);
		return ResponseEntity.ok().body(newObj);
	}
}
